{
  "compiler": {
    "version": "0.6.12+commit.27d51765"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "implementationContract",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "previousAdmin",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "newAdmin",
            "type": "address"
          }
        ],
        "name": "AdminChanged",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "implementation",
            "type": "address"
          }
        ],
        "name": "Upgraded",
        "type": "event"
      },
      {
        "stateMutability": "payable",
        "type": "fallback"
      },
      {
        "inputs": [],
        "name": "admin",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "newAdmin",
            "type": "address"
          }
        ],
        "name": "changeAdmin",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "implementation",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "newImplementation",
            "type": "address"
          }
        ],
        "name": "upgradeTo",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "newImplementation",
            "type": "address"
          },
          {
            "internalType": "bytes",
            "name": "data",
            "type": "bytes"
          }
        ],
        "name": "upgradeToAndCall",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      }
    ],
    "devdoc": {
      "details": "This contract proxies FiatToken calls and enables FiatToken upgrades",
      "kind": "dev",
      "methods": {
        "admin()": {
          "returns": {
            "_0": "The address of the proxy admin."
          }
        },
        "changeAdmin(address)": {
          "details": "Changes the admin of the proxy. Only the current admin can call this function.",
          "params": {
            "newAdmin": "Address to transfer proxy administration to."
          }
        },
        "implementation()": {
          "returns": {
            "_0": "The address of the implementation."
          }
        },
        "upgradeTo(address)": {
          "details": "Upgrade the backing implementation of the proxy. Only the admin can call this function.",
          "params": {
            "newImplementation": "Address of the new implementation."
          }
        },
        "upgradeToAndCall(address,bytes)": {
          "details": "Upgrade the backing implementation of the proxy and call a function on the new implementation. This is useful to initialize the proxied contract.",
          "params": {
            "data": "Data to send as msg.data in the low level call. It should include the signature and the parameters of the function to be called, as described in https://solidity.readthedocs.io/en/develop/abi-spec.html#function-selector-and-argument-encoding.",
            "newImplementation": "Address of the new implementation."
          }
        }
      },
      "title": "FiatTokenProxy",
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {},
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": {
      "contracts/v1/FiatTokenProxy.sol": "FiatTokenProxy"
    },
    "evmVersion": "istanbul",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "optimizer": {
      "enabled": true,
      "runs": 10000000
    },
    "remappings": [
      ":@ensdomains/=node_modules/@ensdomains/",
      ":@openzeppelin/=node_modules/@openzeppelin/",
      ":@solidity-parser/=node_modules/prettier-plugin-solidity/node_modules/@solidity-parser/",
      ":ds-test/=lib/forge-std/lib/ds-test/src/",
      ":eth-gas-reporter/=node_modules/eth-gas-reporter/",
      ":forge-std/=lib/forge-std/src/",
      ":hardhat/=node_modules/hardhat/"
    ]
  },
  "sources": {
    "contracts/upgradeability/AdminUpgradeabilityProxy.sol": {
      "keccak256": "0x55b58fa45bd1ebf255d2eabbd9257445fce2ae7486e8e683623d3375d2d93d1e",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://6ec18ce29bdd44706fce5cdaefb0a6ca4129c1c2f8375cb74d8c6790aaaddec4",
        "dweb:/ipfs/QmXEVnvLp4xAPEgSAkotawcCcggsdDQjAvG4crPuWfA4U9"
      ]
    },
    "contracts/upgradeability/Proxy.sol": {
      "keccak256": "0x2cfa23c03d22d153d41e3b4f2c68e46e4b207205b5d12345b43e575b1da8164a",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://3ff3a86ef54b3763b0ff3e7c3d27a3000d7d2e5ede7c269ab8f0123147cda179",
        "dweb:/ipfs/QmVki2G1PsmuaS7npjuwikNUqvfBDgFrmYUkdkEJqaDwxK"
      ]
    },
    "contracts/upgradeability/UpgradeabilityProxy.sol": {
      "keccak256": "0x7d1312c9090e5fb98d6ab676edcf0c64099e7a251a18091566816a6a2dece517",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://f86a893a20bdb283cec644ddeeb37b766e604ea136f6157341fad669d7ceedfe",
        "dweb:/ipfs/QmQJKYTr2BmLNyTiYVXMYEJWE3JCsR1p7j3fWDacZ3V5vf"
      ]
    },
    "contracts/v1/FiatTokenProxy.sol": {
      "keccak256": "0x7ee55764f74b2983880409ab3873ad6a7299231cd48cb4b9d40a10259d012424",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://95d2b6c3a7c76d2f88a6f3b3785a20460e58bac9d46c6db2bd62496dca06f65b",
        "dweb:/ipfs/QmdX71TWN96ScnvEYHNVnmJfhgfJdF2pE1pgVcjLcbugrK"
      ]
    },
    "node_modules/@openzeppelin/contracts/utils/Address.sol": {
      "keccak256": "0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea",
      "license": "MIT",
      "urls": [
        "bzz-raw://256c8c8af5eb072bc473226ab2b2187149b8fc04f5f4a4820db22527f5ce8e3c",
        "dweb:/ipfs/QmRvi5BhnL7Rxf85KrJhwM6RRhukm4tzoctRdgQEheNyiN"
      ]
    }
  },
  "version": 1
}