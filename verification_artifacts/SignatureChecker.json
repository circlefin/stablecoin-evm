{
  "compiler": {
    "version": "0.6.12+commit.27d51765"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "signer",
            "type": "address"
          },
          {
            "internalType": "bytes32",
            "name": "digest",
            "type": "bytes32"
          },
          {
            "internalType": "bytes",
            "name": "signature",
            "type": "bytes"
          }
        ],
        "name": "isValidSignatureNow",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      }
    ],
    "devdoc": {
      "details": "Signature verification helper that can be used instead of `ECRecover.recover` to seamlessly support both ECDSA signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets. Adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/21bb89ef5bfc789b9333eb05e3ba2b7b284ac77c/contracts/utils/cryptography/SignatureChecker.sol",
      "kind": "dev",
      "methods": {
        "isValidSignatureNow(address,bytes32,bytes)": {
          "details": "Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECRecover.recover`.",
          "params": {
            "digest": "Keccak-256 hash digest of the signed message",
            "signature": "Signature byte array associated with hash",
            "signer": "Address of the claimed signer"
          }
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {},
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": {
      "contracts/util/SignatureChecker.sol": "SignatureChecker"
    },
    "evmVersion": "istanbul",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "optimizer": {
      "enabled": true,
      "runs": 10000000
    },
    "remappings": [
      ":@ensdomains/=node_modules/@ensdomains/",
      ":@openzeppelin/=node_modules/@openzeppelin/",
      ":@solidity-parser/=node_modules/prettier-plugin-solidity/node_modules/@solidity-parser/",
      ":ds-test/=lib/forge-std/lib/ds-test/src/",
      ":eth-gas-reporter/=node_modules/eth-gas-reporter/",
      ":forge-std/=lib/forge-std/src/",
      ":hardhat/=node_modules/hardhat/"
    ]
  },
  "sources": {
    "contracts/interface/IERC1271.sol": {
      "keccak256": "0x8755a3f5c92f746d1dff56c9389b5dfcba2630c7057b62da2531437871709f7e",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://a9aac28c347968ea5eaad87756f74be163411b5d55e338093c6c120d0b264616",
        "dweb:/ipfs/Qmf2mfJF6dDxoNXYfyp7BqGhctC3YjKYGpzNUmipDfqHDf"
      ]
    },
    "contracts/util/ECRecover.sol": {
      "keccak256": "0x7abfe3fc8384dbabe687b69f167653f9cfd9ffc89d954e852705ce3ba4379e0b",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://97891f5fa6e380ffc65f3f031a1efb300bdb63f510f1d20faf5bbb9586496033",
        "dweb:/ipfs/QmbnQKEe9FwCFpisyJJQPAvYNo57EuRNT1UsBQYVc26FJX"
      ]
    },
    "contracts/util/SignatureChecker.sol": {
      "keccak256": "0xdd897f22c2b24d14e6f6f5a0235664955fd70611e5e283dc5573aac8bfd7207f",
      "license": "Apache-2.0",
      "urls": [
        "bzz-raw://fdcf4e52294e000226d216f5cdae3f4769d93ebcad22b540b2cb58141860114f",
        "dweb:/ipfs/QmR9BGSCJ8WtmX6wMM62uqQuhRSVSmkifJZVxWZLMREozp"
      ]
    }
  },
  "version": 1
}